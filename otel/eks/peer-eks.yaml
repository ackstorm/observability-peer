apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opentelemetry-peer-collector-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - events.k8s.io
  resources:
  - events
  verbs:
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opentelemetry-peer-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opentelemetry-peer-collector-role
subjects:
- kind: ServiceAccount
  name: opentelemetry-peer-collector
  namespace: observability-peer
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: opentelemetry-peer
  namespace: observability-peer
spec:
  namespaceSelector:
    matchNames:
    - observability-peer
  podMetricsEndpoints:
  - port: metrics
    relabelings:
    - action: keep
      regex: Running
      sourceLabels:
      - __meta_kubernetes_pod_phase
  selector:
    matchLabels:
      app.kubernetes.io/component: opentelemetry-collector
      app.kubernetes.io/name: opentelemetry-peer-collector
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: opentelemetry-peer
  namespace: observability-peer
spec:
  config: "receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: ${env:MY_POD_IP}:4317\n
    \     http:\n        endpoint: ${env:MY_POD_IP}:4318\n        cors:\n          allowed_origins:\n
    \           - \"http://*\"\n            - \"https://*\"\n  jaeger:\n    protocols:\n
    \     grpc:\n        endpoint: ${env:MY_POD_IP}:14250\n      thrift_http:\n        endpoint:
    ${env:MY_POD_IP}:14268\n      thrift_compact:\n        endpoint: ${env:MY_POD_IP}:6831\n
    \ zipkin:\n    endpoint: ${env:MY_POD_IP}:9411\n  otlp/spanmetrics:\n    protocols:\n
    \     grpc:\n        endpoint: \"localhost:12345\"\n\nexporters:\n  logging:\n
    \   loglevel: warn\n  otlphttp/observer: \n    endpoint: ${PEER_OBSERVER_URL}\n
    \   auth:\n      authenticator: basicauth/observer\n    headers:\n      \"X-Scope-OrgID\":
    \"${PEER_ENVIRONMENT}-${PEER_CLUSTER}\"\n    tls:\n      insecure: true\n  otlp/spanmetrics:\n
    \   endpoint: ${env:MY_POD_IP}:4317\n    tls:\n      insecure: true\n  prometheusremotewrite:\n
    \   endpoint: http://prometheus-prometheus-peer.observability-peer.svc:9090/api/v1/write\n
    \   resource_to_telemetry_conversion:\n      enabled: true\n  loki:\n    endpoint:
    ${PEER_OBSERVER_URL}/loki/api/v1/push\n    auth:\n      authenticator: basicauth/observer\n
    \   headers:\n      \"X-Scope-OrgID\": \"${PEER_ENVIRONMENT}-${PEER_CLUSTER}\"\n\nprocessors:\n
    \ memory_limiter:\n    check_interval: 2s\n    limit_percentage: 75\n    spike_limit_percentage:
    15\n  batch:\n    send_batch_size: 10000\n    timeout: 10s\n  groupbytrace:\n
    \   wait_duration: 30s\n    num_traces: 1000\n  spanmetrics:\n    metrics_exporter:
    'otlp/spanmetrics'\n    latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms,
    100ms, 250ms]\n    dimensions_cache_size: 1500\n    dimensions:\n        - name:
    http.method\n          default: GET\n        - name: http.status_code\n    aggregation_temporality:
    \"AGGREGATION_TEMPORALITY_CUMULATIVE\"     \n    metrics_flush_interval: 30s\n
    \ servicegraph:\n    metrics_exporter: 'otlp/spanmetrics'\n    latency_histogram_buckets:
    [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms] # Buckets for latency histogram\n    dimensions:
    [k8s.namespace.name] # Additional dimensions (labels) to be added to the metrics
    extracted from the resource and span attributes\n    store:\n      ttl: 2s\n      max_items:
    200\n  attributes/cluster:\n    actions:\n      - key: environment\n        value:
    \"${PEER_ENVIRONMENT}\"\n        action: insert\n      - key: cluster\n        value:
    \"${PEER_ENVIRONMENT}-${PEER_CLUSTER}\"\n        action: insert\n  # attributes/spanname:\n
    \ #   actions:\n  #     - key: span_name\n  #       from_attribute: span_name\n
    \ #       action: upsert\n  k8sattributes:\n    auth_type: \"serviceAccount\"\n
    \   passthrough: false\n    filter:\n      node_from_env_var: <KUBE_NODE_NAME>\n
    \   extract:\n      metadata:\n        - k8s.pod.name\n        - k8s.pod.uid\n
    \       - k8s.deployment.name\n        - k8s.namespace.name\n        - k8s.node.name\n
    \       - k8s.pod.start_time\n    pod_association:\n      - sources:\n          -
    from: resource_attribute\n            name: k8s.pod.ip\n      - sources:\n          -
    from: resource_attribute\n            name: k8s.pod.uid\n      - sources:\n          -
    from: connection\n  metricstransform:\n    transforms:\n      - include: calls_total\n
    \       action: update\n        new_name: traces_spanmetrics_calls_total\n        operations:\n
    \         - action: update_label\n            label: operation\n            new_label:
    span.name\n      - include: latency\n        action: update\n        new_name:
    traces_spanmetrics_latency\n\nextensions:\n  health_check: {}\n  memory_ballast:\n
    \   size_in_percentage: 40\n  basicauth/observer:\n    client_auth:\n      username:
    \"${PEER_ENVIRONMENT}-${PEER_CLUSTER}\"\n      password: $TENANT_PASSWORD # Avoid
    flux substitution\n\nservice:\n  extensions:\n  - health_check\n  - memory_ballast\n
    \ - basicauth/observer\n  pipelines:\n    traces:\n      receivers: [otlp, jaeger,
    zipkin]\n      processors: [memory_limiter, k8sattributes, groupbytrace, spanmetrics,
    attributes/cluster, batch]\n      exporters: [logging, otlphttp/observer]\n    traces/servicegraph:\n
    \     receivers: [otlp, jaeger, zipkin]\n      processors: [servicegraph]\n      exporters:
    [logging]\n    metrics:\n      receivers: [otlp]\n      processors: [memory_limiter,
    k8sattributes, metricstransform, batch]\n      exporters: [logging, prometheusremotewrite]\n
    \   metrics/spanmetrics:\n      receivers: [otlp/spanmetrics]\n      exporters:
    [logging, otlp/spanmetrics]\n    logs:\n      receivers: [otlp]\n      processors:
    [memory_limiter, k8sattributes, batch]\n      exporters: [logging, loki]\n  telemetry:\n
    \   metrics:\n      address: ${env:MY_POD_IP}:8888\nexporters:\n  logging:\n    loglevel:
    warn\n  loki:\n    auth:\n      authenticator: basicauth/observer\n    endpoint:
    ${PEER_OBSERVER_URL}/loki/api/v1/push\n    headers:\n      X-Scope-OrgID: ${PEER_ENVIRONMENT}-${PEER_CLUSTER}\n
    \ otlp/spanmetrics:\n    endpoint: ${env:MY_POD_IP}:4317\n    tls:\n      insecure:
    true\n  otlphttp/observer:\n    auth:\n      authenticator: basicauth/observer\n
    \   endpoint: ${PEER_OBSERVER_URL}\n    headers:\n      X-Scope-OrgID: ${PEER_ENVIRONMENT}-${PEER_CLUSTER}\n
    \   tls:\n      insecure: true\n  prometheusremotewrite:\n    endpoint: http://prometheus-prometheus-peer.observability-peer.svc:9090/api/v1/write\n
    \   resource_to_telemetry_conversion:\n      enabled: true\nextensions:\n  basicauth/observer:\n
    \   client_auth:\n      password: $TENANT_PASSWORD\n      username: ${PEER_ENVIRONMENT}-${PEER_CLUSTER}\n
    \ health_check: {}\n  memory_ballast:\n    size_in_percentage: 40\nprocessors:\n
    \ attributes/cluster:\n    actions:\n    - action: insert\n      key: environment\n
    \     value: ${PEER_ENVIRONMENT}\n    - action: insert\n      key: cluster\n      value:
    ${PEER_ENVIRONMENT}-${PEER_CLUSTER}\n  batch:\n    send_batch_size: 10000\n    timeout:
    10s\n  groupbytrace:\n    num_traces: 1000\n    wait_duration: 30s\n  k8sattributes:\n
    \   auth_type: serviceAccount\n    extract:\n      metadata:\n      - k8s.namespace.name\n
    \     - k8s.pod.name\n      - k8s.pod.uid\n      - k8s.node.name\n      - k8s.pod.start_time\n
    \     - k8s.deployment.name\n      - k8s.replicaset.name\n      - k8s.replicaset.uid\n
    \     - k8s.daemonset.name\n      - k8s.daemonset.uid\n      - k8s.job.name\n
    \     - k8s.job.uid\n      - k8s.cronjob.name\n      - k8s.statefulset.name\n
    \     - k8s.statefulset.uid\n      - container.image.tag\n      - container.image.name\n
    \   filter:\n      node_from_env_var: <KUBE_NODE_NAME>\n    passthrough: false\n
    \   pod_association:\n    - sources:\n      - from: resource_attribute\n        name:
    k8s.pod.ip\n    - sources:\n      - from: resource_attribute\n        name: k8s.pod.uid\n
    \   - sources:\n      - from: connection\n  memory_limiter:\n    check_interval:
    5s\n    limit_percentage: 80\n    spike_limit_percentage: 25\n  metricstransform:\n
    \   transforms:\n    - action: update\n      include: calls_total\n      new_name:
    traces_spanmetrics_calls_total\n      operations:\n      - action: update_label\n
    \       label: operation\n        new_label: span.name\n    - action: update\n
    \     include: latency\n      new_name: traces_spanmetrics_latency\n  servicegraph:\n
    \   dimensions:\n    - k8s.namespace.name\n    latency_histogram_buckets:\n    -
    100us\n    - 1ms\n    - 2ms\n    - 6ms\n    - 10ms\n    - 100ms\n    - 250ms\n
    \   metrics_exporter: otlp/spanmetrics\n    store:\n      max_items: 200\n      ttl:
    2s\n  spanmetrics:\n    aggregation_temporality: AGGREGATION_TEMPORALITY_CUMULATIVE\n
    \   dimensions:\n    - default: GET\n      name: http.method\n    - name: http.status_code\n
    \   dimensions_cache_size: 1500\n    latency_histogram_buckets:\n    - 100us\n
    \   - 1ms\n    - 2ms\n    - 6ms\n    - 10ms\n    - 100ms\n    - 250ms\n    metrics_exporter:
    otlp/spanmetrics\n    metrics_flush_interval: 30s\nreceivers:\n  filelog:\n    exclude:
    []\n    include:\n    - /var/log/pods/*/*/*.log\n    include_file_name: false\n
    \   include_file_path: true\n    operators:\n    - id: get-format\n      routes:\n
    \     - expr: body matches \"^\\\\{\"\n        output: parser-docker\n      -
    expr: body matches \"^[^ Z]+ \"\n        output: parser-crio\n      - expr: body
    matches \"^[^ Z]+Z\"\n        output: parser-containerd\n      type: router\n
    \   - id: parser-crio\n      regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr)
    (?P<logtag>[^ ]*) ?(?P<log>.*)$\n      timestamp:\n        layout: 2006-01-02T15:04:05.999999999Z07:00\n
    \       layout_type: gotime\n        parse_from: attributes.time\n      type:
    regex_parser\n    - combine_field: attributes.log\n      combine_with: \"\"\n
    \     id: crio-recombine\n      is_last_entry: attributes.logtag == 'F'\n      max_log_size:
    102400\n      output: extract_metadata_from_filepath\n      source_identifier:
    attributes[\"log.file.path\"]\n      type: recombine\n    - id: parser-containerd\n
    \     regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$\n
    \     timestamp:\n        layout: '%Y-%m-%dT%H:%M:%S.%LZ'\n        parse_from:
    attributes.time\n      type: regex_parser\n    - combine_field: attributes.log\n
    \     combine_with: \"\"\n      id: containerd-recombine\n      is_last_entry:
    attributes.logtag == 'F'\n      max_log_size: 102400\n      output: extract_metadata_from_filepath\n
    \     source_identifier: attributes[\"log.file.path\"]\n      type: recombine\n
    \   - id: parser-docker\n      output: extract_metadata_from_filepath\n      timestamp:\n
    \       layout: '%Y-%m-%dT%H:%M:%S.%LZ'\n        parse_from: attributes.time\n
    \     type: json_parser\n    - id: extract_metadata_from_filepath\n      parse_from:
    attributes[\"log.file.path\"]\n      regex: ^.*\\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\\-]+)\\/(?P<container_name>[^\\._]+)\\/(?P<restart_count>\\d+)\\.log$\n
    \     type: regex_parser\n    - from: attributes.stream\n      to: attributes[\"log.iostream\"]\n
    \     type: move\n    - from: attributes.container_name\n      to: resource[\"k8s.container.name\"]\n
    \     type: move\n    - from: attributes.namespace\n      to: resource[\"k8s.namespace.name\"]\n
    \     type: move\n    - from: attributes.pod_name\n      to: resource[\"k8s.pod.name\"]\n
    \     type: move\n    - from: attributes.restart_count\n      to: resource[\"k8s.container.restart_count\"]\n
    \     type: move\n    - from: attributes.uid\n      to: resource[\"k8s.pod.uid\"]\n
    \     type: move\n    - from: attributes.log\n      to: body\n      type: move\n
    \   start_at: beginning\n  jaeger:\n    protocols:\n      grpc:\n        endpoint:
    ${env:MY_POD_IP}:14250\n      thrift_compact:\n        endpoint: ${env:MY_POD_IP}:6831\n
    \     thrift_http:\n        endpoint: ${env:MY_POD_IP}:14268\n  otlp:\n    protocols:\n
    \     grpc:\n        endpoint: ${env:MY_POD_IP}:4317\n      http:\n        cors:\n
    \         allowed_origins:\n          - http://*\n          - https://*\n        endpoint:
    ${env:MY_POD_IP}:4318\n  otlp/spanmetrics:\n    protocols:\n      grpc:\n        endpoint:
    localhost:12345\n  prometheus:\n    config:\n      scrape_configs:\n      - job_name:
    otel-collector\n        metric_relabel_configs:\n        - action: labeldrop\n
    \         regex: (id|name)\n          replacement: $$1\n        - action: labelmap\n
    \         regex: label_(.+)\n          replacement: $$1\n        scrape_interval:
    10s\n        static_configs:\n        - targets:\n          - 0.0.0.0:8888\n    target_allocator:\n
    \     collector_id: ${POD_NAME}\n      endpoint: http://otel-targetallocator.observability-peer.svc\n
    \     interval: 30s\n  zipkin:\n    endpoint: ${env:MY_POD_IP}:9411\nservice:\n
    \ extensions:\n  - health_check\n  - memory_ballast\n  - basicauth/observer\n
    \ pipelines:\n    logs:\n      exporters:\n      - logging\n      - loki\n      processors:\n
    \     - memory_limiter\n      - k8sattributes\n      - batch\n      receivers:\n
    \     - otlp\n      - filelog\n    metrics:\n      exporters:\n      - logging\n
    \     - prometheusremotewrite\n      processors:\n      - memory_limiter\n      -
    k8sattributes\n      - metricstransform\n      - batch\n      receivers:\n      -
    otlp\n      - prometheus\n    metrics/spanmetrics:\n      exporters:\n      -
    logging\n      - otlp/spanmetrics\n      receivers:\n      - otlp/spanmetrics\n
    \   traces:\n      exporters:\n      - logging\n      - otlphttp/observer\n      processors:\n
    \     - memory_limiter\n      - k8sattributes\n      - groupbytrace\n      - spanmetrics\n
    \     - attributes/cluster\n      - batch\n      receivers:\n      - otlp\n      -
    jaeger\n      - zipkin\n    traces/servicegraph:\n      exporters:\n      - logging\n
    \     processors:\n      - servicegraph\n      receivers:\n      - otlp\n      -
    jaeger\n      - zipkin\n  telemetry:\n    metrics:\n      address: ${env:MY_POD_IP}:8888\n"
  env:
  - name: KUBE_NODE_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: spec.nodeName
  - name: MY_POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: TENANT_PASSWORD
    valueFrom:
      secretKeyRef:
        key: password
        name: observability-tenant-auth
  image: otel/opentelemetry-collector-contrib:0.85.0
  mode: daemonset
  targetAllocator:
    enabled: true
    prometheusCR:
      enabled: true
    serviceAccount: opentelemetry-targetallocator-sa
