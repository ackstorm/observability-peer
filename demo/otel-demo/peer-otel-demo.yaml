apiVersion: v1
kind: Namespace
metadata:
  name: otel-demo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo
  name: ackstorm-opentelemetry-demo
  namespace: otel-demo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/version: 0.97.0
    helm.sh/chart: opentelemetry-collector-0.86.0
  name: ackstorm-opentelemetry-demo-otelcol
  namespace: otel-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/version: 0.97.0
    helm.sh/chart: opentelemetry-collector-0.86.0
  name: ackstorm-opentelemetry-demo-otelcol
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/version: 0.97.0
    helm.sh/chart: opentelemetry-collector-0.86.0
  name: ackstorm-opentelemetry-demo-otelcol
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ackstorm-opentelemetry-demo-otelcol
subjects:
- kind: ServiceAccount
  name: ackstorm-opentelemetry-demo-otelcol
  namespace: otel-demo
---
apiVersion: v1
data:
  demo.flagd.json: |
    {
      "$schema": "https://flagd.dev/schema/v0/flags.json",
      "flags": {
        "productCatalogFailure": {
          "description": "Fail product catalog service on a specific product",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "recommendationServiceCacheFailure": {
          "description": "Fail recommendation service cache",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "adServiceManualGc": {
          "description": "Triggers full manual garbage collections in the ad service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "adServiceHighCpu": {
          "description": "Triggers high cpu load in the ad service",
          "state": "ENABLED",
          "variants": {
              "on": true,
              "off": false
            },
            "defaultVariant": "off"
        },
        "adServiceFailure": {
          "description": "Fail ad service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off",
          "targeting": {
            "fractional": [
              {
                "var": "session"
              },
              [
                "on",
                10
              ],
              [
                "off",
                90
              ]
            ]
          }
        },
        "cartServiceFailure": {
          "description": "Fail cart service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "paymentServiceFailure": {
          "description": "Fail payment service charge requests",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "paymentServiceUnreachable": {
          "description": "Payment service is unavailable",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "loadgeneratorFloodHomepage": {
          "description": "Flood the frontend with a large amount of requests.",
          "state": "ENABLED",
          "variants": {
            "on": 100,
            "off": 0
          },
          "defaultVariant": "off"
        }
      }
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo
  name: ackstorm-opentelemetry-demo-flagd-config
  namespace: otel-demo
---
apiVersion: v1
data:
  relay: |
    connectors:
      spanmetrics: {}
    exporters:
      debug: {}
      opensearch:
        http:
          endpoint: http://otel-demo-opensearch:9200
          tls:
            insecure: true
        logs_index: otel
      otlp:
        endpoint: 'ackstorm-opentelemetry-demo-jaeger-collector:4317'
        tls:
          insecure: true
      otlphttp/prometheus:
        endpoint: http://ackstorm-opentelemetry-demo-prometheus-server:9090/api/v1/otlp
        tls:
          insecure: true
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      batch: {}
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
        - action: insert
          from_attribute: k8s.pod.uid
          key: service.instance.id
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411
    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - opensearch
          - debug
          processors:
          - k8sattributes
          - memory_limiter
          - resource
          - batch
          receivers:
          - otlp
        metrics:
          exporters:
          - otlphttp/prometheus
          - debug
          processors:
          - k8sattributes
          - memory_limiter
          - resource
          - batch
          receivers:
          - otlp
          - spanmetrics
        traces:
          exporters:
          - otlp
          - debug
          - spanmetrics
          processors:
          - k8sattributes
          - memory_limiter
          - resource
          - batch
          receivers:
          - otlp
          - jaeger
          - zipkin
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/version: 0.97.0
    helm.sh/chart: opentelemetry-collector-0.86.0
  name: ackstorm-opentelemetry-demo-otelcol
  namespace: otel-demo
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: adservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-adservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-adservice
  name: ackstorm-opentelemetry-demo-adservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-adservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-cartservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-cartservice
  name: ackstorm-opentelemetry-demo-cartservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-cartservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-checkoutservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-checkoutservice
  name: ackstorm-opentelemetry-demo-checkoutservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-checkoutservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-currencyservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-currencyservice
  name: ackstorm-opentelemetry-demo-currencyservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-currencyservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-emailservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-emailservice
  name: ackstorm-opentelemetry-demo-emailservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-emailservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: flagd
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-flagd
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-flagd
  name: ackstorm-opentelemetry-demo-flagd
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8013
    targetPort: 8013
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-flagd
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-frontend
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-frontend
  name: ackstorm-opentelemetry-demo-frontend
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-frontend
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-frontendproxy
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-frontendproxy
  name: ackstorm-opentelemetry-demo-frontendproxy
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-frontendproxy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kafka
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-kafka
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-kafka
  name: ackstorm-opentelemetry-demo-kafka
  namespace: otel-demo
spec:
  ports:
  - name: plaintext
    port: 9092
    targetPort: 9092
  - name: controller
    port: 9093
    targetPort: 9093
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-kafka
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-loadgenerator
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-loadgenerator
  name: ackstorm-opentelemetry-demo-loadgenerator
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8089
    targetPort: 8089
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-loadgenerator
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/version: 0.97.0
    component: standalone-collector
    helm.sh/chart: opentelemetry-collector-0.86.0
  name: ackstorm-opentelemetry-demo-otelcol
  namespace: otel-demo
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: jaeger-compact
    port: 6831
    protocol: UDP
    targetPort: 6831
  - name: jaeger-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  - name: jaeger-thrift
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: metrics
    port: 8888
    protocol: TCP
    targetPort: 8888
  - appProtocol: grpc
    name: otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: prometheus
    port: 9464
    protocol: TCP
    targetPort: 9464
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  selector:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/name: otelcol
    component: standalone-collector
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-paymentservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-paymentservice
  name: ackstorm-opentelemetry-demo-paymentservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-paymentservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-productcatalogservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-productcatalogservice
  name: ackstorm-opentelemetry-demo-productcatalogservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-productcatalogservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-quoteservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-quoteservice
  name: ackstorm-opentelemetry-demo-quoteservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-quoteservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-recommendationservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-recommendationservice
  name: ackstorm-opentelemetry-demo-recommendationservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-recommendationservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-redis
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-redis
  name: ackstorm-opentelemetry-demo-redis
  namespace: otel-demo
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-redis
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-shippingservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-shippingservice
  name: ackstorm-opentelemetry-demo-shippingservice
  namespace: otel-demo
spec:
  ports:
  - name: tcp-service
    port: 8080
    targetPort: 8080
  selector:
    opentelemetry.io/name: ackstorm-opentelemetry-demo-shippingservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: accountingservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-accountingservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-accountingservice
  name: ackstorm-opentelemetry-demo-accountingservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-accountingservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: accountingservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-accountingservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-accountingservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: KAFKA_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-kafka:9092
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-accountingservice
        imagePullPolicy: IfNotPresent
        name: accountingservice
        resources:
          limits:
            memory: 20Mi
        volumeMounts: null
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 ackstorm-opentelemetry-demo-kafka 9092; do echo waiting
          for kafka; sleep 2; done;
        image: busybox:latest
        name: wait-for-kafka
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: adservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-adservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-adservice
  name: ackstorm-opentelemetry-demo-adservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-adservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: adservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-adservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-adservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: AD_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: ackstorm-opentelemetry-demo-flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: OTEL_LOGS_EXPORTER
          value: otlp
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-adservice
        imagePullPolicy: IfNotPresent
        name: adservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 300Mi
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-cartservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-cartservice
  name: ackstorm-opentelemetry-demo-cartservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-cartservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: cartservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-cartservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-cartservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: CART_SERVICE_PORT
          value: "8080"
        - name: ASPNETCORE_URLS
          value: http://*:$(CART_SERVICE_PORT)
        - name: FLAGD_HOST
          value: ackstorm-opentelemetry-demo-flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: REDIS_ADDR
          value: ackstorm-opentelemetry-demo-redis:6379
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-cartservice
        imagePullPolicy: IfNotPresent
        name: cartservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 160Mi
        volumeMounts: null
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 ackstorm-opentelemetry-demo-redis 6379; do echo waiting
          for redis; sleep 2; done;
        image: busybox:latest
        name: wait-for-redis
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-checkoutservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-checkoutservice
  name: ackstorm-opentelemetry-demo-checkoutservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-checkoutservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: checkoutservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-checkoutservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-checkoutservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: CHECKOUT_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: ackstorm-opentelemetry-demo-flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: CART_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-cartservice:8080
        - name: CURRENCY_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-currencyservice:8080
        - name: EMAIL_SERVICE_ADDR
          value: http://ackstorm-opentelemetry-demo-emailservice:8080
        - name: PAYMENT_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-paymentservice:8080
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-productcatalogservice:8080
        - name: SHIPPING_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-shippingservice:8080
        - name: KAFKA_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-kafka:9092
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-checkoutservice
        imagePullPolicy: IfNotPresent
        name: checkoutservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts: null
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 ackstorm-opentelemetry-demo-kafka 9092; do echo waiting
          for kafka; sleep 2; done;
        image: busybox:latest
        name: wait-for-kafka
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-currencyservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-currencyservice
  name: ackstorm-opentelemetry-demo-currencyservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-currencyservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: currencyservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-currencyservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-currencyservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: CURRENCY_SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: VERSION
          value: 1.9.0
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-currencyservice
        imagePullPolicy: IfNotPresent
        name: currencyservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-emailservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-emailservice
  name: ackstorm-opentelemetry-demo-emailservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-emailservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: emailservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-emailservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-emailservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: EMAIL_SERVICE_PORT
          value: "8080"
        - name: APP_ENV
          value: production
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-emailservice
        imagePullPolicy: IfNotPresent
        name: emailservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 100Mi
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: flagd
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-flagd
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-flagd
  name: ackstorm-opentelemetry-demo-flagd
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-flagd
  template:
    metadata:
      labels:
        app.kubernetes.io/component: flagd
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-flagd
        opentelemetry.io/name: ackstorm-opentelemetry-demo-flagd
    spec:
      containers:
      - command:
        - /flagd-build
        - start
        - --uri
        - file:./etc/flagd/demo.flagd.json
        env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-feature/flagd:v0.9.0
        imagePullPolicy: IfNotPresent
        name: flagd
        ports:
        - containerPort: 8013
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts:
        - mountPath: /etc/flagd
          name: config
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes:
      - configMap:
          name: ackstorm-opentelemetry-demo-flagd-config
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: frauddetectionservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-frauddetectionservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-frauddetectionservice
  name: ackstorm-opentelemetry-demo-frauddetectionservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-frauddetectionservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: frauddetectionservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-frauddetectionservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-frauddetectionservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: KAFKA_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-kafka:9092
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-frauddetectionservice
        imagePullPolicy: IfNotPresent
        name: frauddetectionservice
        resources:
          limits:
            memory: 200Mi
        volumeMounts: null
      initContainers:
      - command:
        - sh
        - -c
        - until nc -z -v -w30 ackstorm-opentelemetry-demo-kafka 9092; do echo waiting
          for kafka; sleep 2; done;
        image: busybox:latest
        name: wait-for-kafka
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-frontend
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-frontend
  name: ackstorm-opentelemetry-demo-frontend
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-frontend
        opentelemetry.io/name: ackstorm-opentelemetry-demo-frontend
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: FRONTEND_PORT
          value: "8080"
        - name: FRONTEND_ADDR
          value: :8080
        - name: AD_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-adservice:8080
        - name: CART_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-cartservice:8080
        - name: CHECKOUT_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-checkoutservice:8080
        - name: CURRENCY_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-currencyservice:8080
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-productcatalogservice:8080
        - name: RECOMMENDATION_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-recommendationservice:8080
        - name: SHIPPING_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-shippingservice:8080
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: WEB_OTEL_SERVICE_NAME
          value: frontend-web
        - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: http://localhost:8080/otlp-http/v1/traces
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-frontend
        imagePullPolicy: IfNotPresent
        name: frontend
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 200Mi
        securityContext:
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-frontendproxy
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-frontendproxy
  name: ackstorm-opentelemetry-demo-frontendproxy
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-frontendproxy
  template:
    metadata:
      labels:
        app.kubernetes.io/component: frontendproxy
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-frontendproxy
        opentelemetry.io/name: ackstorm-opentelemetry-demo-frontendproxy
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: ENVOY_PORT
          value: "8080"
        - name: FRONTEND_PORT
          value: "8080"
        - name: FRONTEND_HOST
          value: ackstorm-opentelemetry-demo-frontend
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: LOCUST_WEB_HOST
          value: ackstorm-opentelemetry-demo-loadgenerator
        - name: GRAFANA_SERVICE_PORT
          value: "80"
        - name: GRAFANA_SERVICE_HOST
          value: ackstorm-opentelemetry-demo-grafana
        - name: JAEGER_SERVICE_PORT
          value: "16686"
        - name: JAEGER_SERVICE_HOST
          value: ackstorm-opentelemetry-demo-jaeger-query
        - name: OTEL_COLLECTOR_PORT_GRPC
          value: "4317"
        - name: OTEL_COLLECTOR_PORT_HTTP
          value: "4318"
        - name: OTEL_COLLECTOR_HOST
          value: $(OTEL_COLLECTOR_NAME)
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-frontendproxy
        imagePullPolicy: IfNotPresent
        name: frontendproxy
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 50Mi
        securityContext:
          runAsGroup: 101
          runAsNonRoot: true
          runAsUser: 101
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: kafka
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-kafka
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-kafka
  name: ackstorm-opentelemetry-demo-kafka
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-kafka
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kafka
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-kafka
        opentelemetry.io/name: ackstorm-opentelemetry-demo-kafka
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://ackstorm-opentelemetry-demo-kafka:9092
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: KAFKA_HEAP_OPTS
          value: -Xmx200M -Xms200M
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-kafka
        imagePullPolicy: IfNotPresent
        name: kafka
        ports:
        - containerPort: 9092
          name: plaintext
        - containerPort: 9093
          name: controller
        resources:
          limits:
            memory: 500Mi
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-loadgenerator
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-loadgenerator
  name: ackstorm-opentelemetry-demo-loadgenerator
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-loadgenerator
  template:
    metadata:
      labels:
        app.kubernetes.io/component: loadgenerator
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-loadgenerator
        opentelemetry.io/name: ackstorm-opentelemetry-demo-loadgenerator
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: LOCUST_USERS
          value: "10"
        - name: LOCUST_SPAWN_RATE
          value: "1"
        - name: LOCUST_HOST
          value: http://ackstorm-opentelemetry-demo-frontendproxy:8080
        - name: LOCUST_HEADLESS
          value: "false"
        - name: LOCUST_AUTOSTART
          value: "true"
        - name: LOCUST_BROWSER_TRAFFIC_ENABLED
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: FLAGD_HOST
          value: ackstorm-opentelemetry-demo-flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-loadgenerator
        imagePullPolicy: IfNotPresent
        name: loadgenerator
        ports:
        - containerPort: 8089
          name: service
        resources:
          limits:
            memory: 1Gi
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/version: 0.97.0
    helm.sh/chart: opentelemetry-collector-0.86.0
  name: ackstorm-opentelemetry-demo-otelcol
  namespace: otel-demo
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: ackstorm-opentelemetry-demo
      app.kubernetes.io/name: otelcol
      component: standalone-collector
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 42a3ba0f2c6d1024db57d493429ff6f73b7cdc02574df8f7deced1ee98fcdf30
        opentelemetry_community_demo: "true"
        prometheus.io/port: "9464"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: otelcol
        component: standalone-collector
    spec:
      containers:
      - command:
        - /otelcol-contrib
        - --config=/conf/relay.yaml
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: GOMEMLIMIT
          value: 160MiB
        image: otel/opentelemetry-collector-contrib:0.97.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        name: opentelemetry-collector
        ports:
        - containerPort: 6831
          name: jaeger-compact
          protocol: UDP
        - containerPort: 14250
          name: jaeger-grpc
          protocol: TCP
        - containerPort: 14268
          name: jaeger-thrift
          protocol: TCP
        - containerPort: 8888
          name: metrics
          protocol: TCP
        - containerPort: 4317
          name: otlp
          protocol: TCP
        - containerPort: 4318
          name: otlp-http
          protocol: TCP
        - containerPort: 9464
          name: prometheus
          protocol: TCP
        - containerPort: 9411
          name: zipkin
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
          limits:
            memory: 200Mi
        securityContext: {}
        volumeMounts:
        - mountPath: /conf
          name: opentelemetry-collector-configmap
      hostNetwork: false
      securityContext: {}
      serviceAccountName: ackstorm-opentelemetry-demo-otelcol
      volumes:
      - configMap:
          items:
          - key: relay
            path: relay.yaml
          name: ackstorm-opentelemetry-demo-otelcol
        name: opentelemetry-collector-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-paymentservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-paymentservice
  name: ackstorm-opentelemetry-demo-paymentservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-paymentservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: paymentservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-paymentservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-paymentservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: PAYMENT_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: ackstorm-opentelemetry-demo-flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-paymentservice
        imagePullPolicy: IfNotPresent
        name: paymentservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 120Mi
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-productcatalogservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-productcatalogservice
  name: ackstorm-opentelemetry-demo-productcatalogservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-productcatalogservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: productcatalogservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-productcatalogservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-productcatalogservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: PRODUCT_CATALOG_SERVICE_PORT
          value: "8080"
        - name: FLAGD_HOST
          value: ackstorm-opentelemetry-demo-flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-productcatalogservice
        imagePullPolicy: IfNotPresent
        name: productcatalogservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-quoteservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-quoteservice
  name: ackstorm-opentelemetry-demo-quoteservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-quoteservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: quoteservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-quoteservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-quoteservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: QUOTE_SERVICE_PORT
          value: "8080"
        - name: OTEL_PHP_AUTOLOAD_ENABLED
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4318
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-quoteservice
        imagePullPolicy: IfNotPresent
        name: quoteservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 40Mi
        securityContext:
          runAsGroup: 33
          runAsNonRoot: true
          runAsUser: 33
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-recommendationservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-recommendationservice
  name: ackstorm-opentelemetry-demo-recommendationservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-recommendationservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: recommendationservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-recommendationservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-recommendationservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: RECOMMENDATION_SERVICE_PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: ackstorm-opentelemetry-demo-productcatalogservice:8080
        - name: FLAGD_HOST
          value: ackstorm-opentelemetry-demo-flagd
        - name: FLAGD_PORT
          value: "8013"
        - name: OTEL_PYTHON_LOG_CORRELATION
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-recommendationservice
        imagePullPolicy: IfNotPresent
        name: recommendationservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 500Mi
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-redis
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-redis
  name: ackstorm-opentelemetry-demo-redis
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/component: redis
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-redis
        opentelemetry.io/name: ackstorm-opentelemetry-demo-redis
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        resources:
          limits:
            memory: 20Mi
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/instance: ackstorm-opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ackstorm-opentelemetry-demo-shippingservice
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/version: 1.9.0
    helm.sh/chart: opentelemetry-demo-0.30.3
    opentelemetry.io/name: ackstorm-opentelemetry-demo-shippingservice
  name: ackstorm-opentelemetry-demo-shippingservice
  namespace: otel-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      opentelemetry.io/name: ackstorm-opentelemetry-demo-shippingservice
  template:
    metadata:
      labels:
        app.kubernetes.io/component: shippingservice
        app.kubernetes.io/instance: ackstorm-opentelemetry-demo
        app.kubernetes.io/name: ackstorm-opentelemetry-demo-shippingservice
        opentelemetry.io/name: ackstorm-opentelemetry-demo-shippingservice
    spec:
      containers:
      - env:
        - name: OTEL_COLLECTOR_NAME
          value: opentelemetry-peer-collector.observability-peer.svc
        - name: OTEL_SERVICE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app.kubernetes.io/component']
        - name: OTEL_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: OTEL_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: OTEL_K8S_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: OTEL_K8S_POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
          value: cumulative
        - name: SHIPPING_SERVICE_PORT
          value: "8080"
        - name: QUOTE_SERVICE_ADDR
          value: http://ackstorm-opentelemetry-demo-quoteservice:8080
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(OTEL_COLLECTOR_NAME):4317
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: app.name="otel-demo",service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=otel-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
        image: ghcr.io/open-telemetry/demo:1.9.0-shippingservice
        imagePullPolicy: IfNotPresent
        name: shippingservice
        ports:
        - containerPort: 8080
          name: service
        resources:
          limits:
            memory: 20Mi
        volumeMounts: null
      serviceAccountName: ackstorm-opentelemetry-demo
      volumes: null
